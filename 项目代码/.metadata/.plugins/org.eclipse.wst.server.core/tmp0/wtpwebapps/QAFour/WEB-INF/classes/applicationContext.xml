<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util  
     http://www.springframework.org/schema/util/spring-util-4.0.xsd 
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd">

	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="configLocation" value="classpath:QAFour.cfg.xml">
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQL5Dialect
				</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
			</props>
		</property>

		<property name="packagesToScan">	
			<list>
				<value>com.four.qa.model</value>
				<value>com.four.qa.daoBase</value>
				<value>com.four.qa.daoImpl</value>
			</list>
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	<bean id="userDao" class="com.four.qa.daoImpl.UserInfoDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="questionDao" class="com.four.qa.daoImpl.QuestionDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="topicDao" class="com.four.qa.daoImpl.TopicDao">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="answerDao" class="com.four.qa.daoImpl.AnswerDao">
	    <property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="fsanswerDao" class="com.four.qa.daoImpl.FSAnswerDao">
	    <property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean id="qtpDao" class="com.four.qa.daoImpl.QTPDao">
	    <property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- REST服务的注解例子 -->
	<jaxrs:server id="Service" address="/REST">
		<jaxrs:serviceBeans>
			<!-- 配置UserSeivice中的属性dao -->
			<bean class="com.four.qa.serviceImpl.UserService">
				<property name="userDao" ref="userDao"></property>
			</bean>
			<!-- 配置QuestionService中的属性dao -->
			<bean class="com.four.qa.serviceImpl.QuestionService">
				<property name="questionDao" ref="questionDao"></property>
				<property name="topicDao" ref="topicDao"></property>
				<property name="userDao" ref="userDao"></property>
				<property name="qtpDao" ref="qtpDao"></property>
			</bean>

			<!-- 配置TopicService中的属性dao -->
			<bean class="com.four.qa.serviceImpl.TopicService">
				<property name="topicDao" ref="topicDao"></property>
			</bean>
			
			<!-- 配置AnswerService中的属性dao -->
			<bean class="com.four.qa.serviceImpl.AnswerService">
				<property name="answerDao" ref="answerDao"></property>
				<property name="userDao" ref="userDao"></property>
				<property name="questionDao" ref="questionDao"></property>
				<property name="fsanswerDao" ref="fsanswerDao"></property>
			</bean>
			
			
		</jaxrs:serviceBeans>

		<jaxrs:extensionMappings>
			<entry key="json" value="application/json" />
			<entry key="xml" value="application/xml" />
		</jaxrs:extensionMappings>

		<jaxrs:providers>
			<ref bean="jsonProvider" />
			<bean class="com.four.qa.serviceException.InvokeFaultExceptionMapper" />
		</jaxrs:providers>
		<jaxrs:languageMappings>
			<entry key="en" value="en-gb" />
		</jaxrs:languageMappings>
	</jaxrs:server>

	<!-- JsonProvider的属性说明: 1. dropRootElement 默认为false，则Json格式会将类名作为第一个节点， 
		如{Customer:{"id":123,"name":"John"}}， 如果配置为true，则Json格式为{"id":123,"name":"John"}， 
		而Gson等Json包会解析格式为后者。 2. dropCollectionWrapperElement属性默认为false， 则当遇到Collection时，Json会在集合中将容器中类名作为一个节点， 
		比如{"Customer":{{"id":123,"name":"John"}}}， 而设置为false，则JSon格式为{{"id":123,"name":"John"}} 
		3. serializeAsArray属性默认为false，则当遇到Collecion时， 格式为{{"id":123,"name":"John"}}，如果设置为true， 
		则格式为[{"id":123,"name":"john"}]，而Gson等解析为后者。 -->
	<util:list id="jsonKeys">
		<value>app</value>
		<value>comment</value>
	</util:list>

	<util:list id="jsonTypes">
		<value>application/json</value>
		<value>application/jettison</value>
	</util:list>
	<bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
		<!-- <property name="dropRootElement" value="true" /> <property name="dropCollectionWrapperElement" 
			value="true" /> <property name="serializeAsArray" value="true" /> -->

		<property name="serializeAsArray" value="true" />
		<property name="arrayKeys" ref="jsonKeys" />
		<property name="produceMediaTypes" ref="jsonTypes" />
		<property name="consumeMediaTypes" ref="jsonTypes" />
		<property name="ignoreNamespaces" value="true" />
		<property name="dropRootElement" value="true" />
		<property name="dropCollectionWrapperElement" value="true" />
		<property name="ignoreMixedContent" value="true" />
		<property name="supportUnwrapped" value="true" />
		<property name="attributesToElements" value="true" />
	</bean>

</beans>
